package com.staxter.model;

import org.springframework.lang.NonNull;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.staxter.utils.Utils;

/**
 * This class provides user definition
 * 
 * @author cresende
 */

public class User
{
    /**
     * User id generated by the system
     */
    private String id;

    /**
     * User first name
     */
    private String firstName;

    /**
     * User last name
     */
    private String lastName;

    /**
     * Unique user name
     */
    private String userName;

    /**
     * Plain text password, it will be used when deserializing the object(in the
     * set method) it will save the value hashed in the object hashedPassword
     * for secure reason, @see {@link User}{@link #setPlainTextPassword(String)}
     */
    private String plainTextPassword;

    /**
     * Internally used to store the user password
     */
    @JsonIgnore
    private String hashedPassword;


    /**
     * Creates a new instance of User.
     * 
     * @param firstName user first name to be assigned
     * @param lastName user last name to be assigned
     * @param userName user username to be assigned
     * @param plainTextPassword user password to be assigned
     */
    public User(String firstName, String lastName, String userName, String plainTextPassword)
    {
        super();
        this.firstName = firstName;
        this.lastName = lastName;
        this.userName = userName;
        this.plainTextPassword = plainTextPassword;
    }

    /**
     * Sets the id.
     * 
     * @param id a String containing the id to set
     */
    public void setId(String id)
    {
        this.id = id;
    }

    /**
     * Sets the plainTextPassword.
     * 
     * @param plainTextPassword a String containing the plainTextPassword to set
     */
    @JsonProperty(value = "password")
    @NonNull
    public void setPlainTextPassword(String plainTextPassword)
    {
        this.hashedPassword = Utils.generateHashSHA1(plainTextPassword);
    }

    /**
     * Returns the id.
     * 
     * @return a String containing the id of this User
     */
    public String getId()
    {
        return id;
    }

    /**
     * Returns the firstName.
     * 
     * @return a String containing the firstName of this User
     */
    public String getFirstName()
    {
        return firstName;
    }

    /**
     * Returns the lastName.
     * 
     * @return a String containing the lastName of this User
     */
    public String getLastName()
    {
        return lastName;
    }

    /**
     * Returns the userName.
     * 
     * @return a String containing the userName of this User
     */
    public String getUserName()
    {
        return userName;
    }

    /**
     * Returns the plainTextPassword.
     * 
     * @return a String containing the plainTextPassword of this User
     */
    @JsonIgnore
    public String getPlainTextPassword()
    {
        return plainTextPassword;
    }

    /**
     * Returns the hashedPassword.
     * 
     * @return a String containing the hashedPassword of this User
     */
    public String getHashedPassword()
    {
        return hashedPassword;
    }

    /** {@inheritDoc} */
    @Override
    public int hashCode()
    {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((userName == null) ? 0 : userName.hashCode());
        return result;
    }

    /** {@inheritDoc} */
    @Override
    public boolean equals(Object obj)
    {
        if (this == obj) return true;
        if (obj == null) return false;
        if (getClass() != obj.getClass()) return false;
        User other = (User) obj;
        if (userName == null)
        {
            if (other.userName != null) return false;
        }
        else if (!userName.equals(other.userName)) return false;
        return true;
    }

}
